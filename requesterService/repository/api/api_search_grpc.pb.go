// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/api_search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepositoryServiceSearch_GetTopLongMemes_FullMethodName        = "/api.RepositoryServiceSearch/GetTopLongMemes"
	RepositoryServiceSearch_SearchMemesBySubstring_FullMethodName = "/api.RepositoryServiceSearch/SearchMemesBySubstring"
	RepositoryServiceSearch_GetMemesByMonth_FullMethodName        = "/api.RepositoryServiceSearch/GetMemesByMonth"
	RepositoryServiceSearch_GetRandomMeme_FullMethodName          = "/api.RepositoryServiceSearch/GetRandomMeme"
)

// RepositoryServiceSearchClient is the client API for RepositoryServiceSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceSearchClient interface {
	GetTopLongMemes(ctx context.Context, in *TopLongMemesRequest, opts ...grpc.CallOption) (*MemesResponse, error)
	SearchMemesBySubstring(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*MemesResponse, error)
	GetMemesByMonth(ctx context.Context, in *MonthRequest, opts ...grpc.CallOption) (*MemesResponse, error)
	GetRandomMeme(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemeResponse, error)
}

type repositoryServiceSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceSearchClient(cc grpc.ClientConnInterface) RepositoryServiceSearchClient {
	return &repositoryServiceSearchClient{cc}
}

func (c *repositoryServiceSearchClient) GetTopLongMemes(ctx context.Context, in *TopLongMemesRequest, opts ...grpc.CallOption) (*MemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemesResponse)
	err := c.cc.Invoke(ctx, RepositoryServiceSearch_GetTopLongMemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceSearchClient) SearchMemesBySubstring(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*MemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemesResponse)
	err := c.cc.Invoke(ctx, RepositoryServiceSearch_SearchMemesBySubstring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceSearchClient) GetMemesByMonth(ctx context.Context, in *MonthRequest, opts ...grpc.CallOption) (*MemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemesResponse)
	err := c.cc.Invoke(ctx, RepositoryServiceSearch_GetMemesByMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceSearchClient) GetRandomMeme(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemeResponse)
	err := c.cc.Invoke(ctx, RepositoryServiceSearch_GetRandomMeme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceSearchServer is the server API for RepositoryServiceSearch service.
// All implementations must embed UnimplementedRepositoryServiceSearchServer
// for forward compatibility.
type RepositoryServiceSearchServer interface {
	GetTopLongMemes(context.Context, *TopLongMemesRequest) (*MemesResponse, error)
	SearchMemesBySubstring(context.Context, *SearchRequest) (*MemesResponse, error)
	GetMemesByMonth(context.Context, *MonthRequest) (*MemesResponse, error)
	GetRandomMeme(context.Context, *Empty) (*MemeResponse, error)
	mustEmbedUnimplementedRepositoryServiceSearchServer()
}

// UnimplementedRepositoryServiceSearchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepositoryServiceSearchServer struct{}

func (UnimplementedRepositoryServiceSearchServer) GetTopLongMemes(context.Context, *TopLongMemesRequest) (*MemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopLongMemes not implemented")
}
func (UnimplementedRepositoryServiceSearchServer) SearchMemesBySubstring(context.Context, *SearchRequest) (*MemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMemesBySubstring not implemented")
}
func (UnimplementedRepositoryServiceSearchServer) GetMemesByMonth(context.Context, *MonthRequest) (*MemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemesByMonth not implemented")
}
func (UnimplementedRepositoryServiceSearchServer) GetRandomMeme(context.Context, *Empty) (*MemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomMeme not implemented")
}
func (UnimplementedRepositoryServiceSearchServer) mustEmbedUnimplementedRepositoryServiceSearchServer() {
}
func (UnimplementedRepositoryServiceSearchServer) testEmbeddedByValue() {}

// UnsafeRepositoryServiceSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceSearchServer will
// result in compilation errors.
type UnsafeRepositoryServiceSearchServer interface {
	mustEmbedUnimplementedRepositoryServiceSearchServer()
}

func RegisterRepositoryServiceSearchServer(s grpc.ServiceRegistrar, srv RepositoryServiceSearchServer) {
	// If the following call pancis, it indicates UnimplementedRepositoryServiceSearchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepositoryServiceSearch_ServiceDesc, srv)
}

func _RepositoryServiceSearch_GetTopLongMemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopLongMemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceSearchServer).GetTopLongMemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryServiceSearch_GetTopLongMemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceSearchServer).GetTopLongMemes(ctx, req.(*TopLongMemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryServiceSearch_SearchMemesBySubstring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceSearchServer).SearchMemesBySubstring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryServiceSearch_SearchMemesBySubstring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceSearchServer).SearchMemesBySubstring(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryServiceSearch_GetMemesByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceSearchServer).GetMemesByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryServiceSearch_GetMemesByMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceSearchServer).GetMemesByMonth(ctx, req.(*MonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryServiceSearch_GetRandomMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceSearchServer).GetRandomMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryServiceSearch_GetRandomMeme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceSearchServer).GetRandomMeme(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryServiceSearch_ServiceDesc is the grpc.ServiceDesc for RepositoryServiceSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryServiceSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RepositoryServiceSearch",
	HandlerType: (*RepositoryServiceSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopLongMemes",
			Handler:    _RepositoryServiceSearch_GetTopLongMemes_Handler,
		},
		{
			MethodName: "SearchMemesBySubstring",
			Handler:    _RepositoryServiceSearch_SearchMemesBySubstring_Handler,
		},
		{
			MethodName: "GetMemesByMonth",
			Handler:    _RepositoryServiceSearch_GetMemesByMonth_Handler,
		},
		{
			MethodName: "GetRandomMeme",
			Handler:    _RepositoryServiceSearch_GetRandomMeme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/api_search.proto",
}
