import asyncio
import logging
import os
import grpc
from aiogram import Bot, Dispatcher, types

import api_pb2
import api_pb2_grpc

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_ZHENIA_BOT_TOKEN")
GRPC_SERVER = os.getenv("ZHENIA_BOT_GRPC_SERVER")

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ gRPC-–º–µ—Ç–æ–¥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def call_grpc_method(method_name: str, request):
    try:
        async with grpc.aio.insecure_channel(GRPC_SERVER) as channel:
            stub = api_pb2_grpc.RequesterServiceStub(channel)
            method = getattr(stub, method_name, None)
            if method:
                response = await method(request)
                return response
            else:
                logging.error(f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ gRPC-—Å–µ—Ä–≤–∏—Å–µ.")
                return None
    except grpc.aio.AioRpcError as e:
        logging.error(f"–û—à–∏–±–∫–∞ gRPC: {e.code()} - {e.details()}")
        return None


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—Ü–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Å–ª–æ
def parse_month(month: str):
    months = {
        "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–º–∞–π": 5, "–∏—é–Ω—å": 6,
        "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
    }
    return months.get(month.lower(), None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_commands(message: types.Message):
    args = message.text.split(maxsplit=1)
    command = args[0]

    if command == "/highlight_month":
        if len(args) < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü! –ü—Ä–∏–º–µ—Ä: /highlight_month —è–Ω–≤–∞—Ä—å")
            return

        month_num = parse_month(args[1])
        if not month_num:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞! –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å, –º–∞—Ä—Ç...")
            return

        request = api_pb2.MonthHighlightRequest(month=month_num)
        response = await call_grpc_method("GetMemesByMonth", request)
        if response:
            await message.answer(response.text or "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    elif command == "/highlight_word":
        if len(args) < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É! –ü—Ä–∏–º–µ—Ä: /highlight_word –≤–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å")
            return

        search_phrase = args[1]
        logging.info(f"üîç –ü–æ–∏—Å–∫ —Ö–∞–π–ª–∞–π—Ç–æ–≤ –ø–æ —Ñ—Ä–∞–∑–µ: {search_phrase}")

        request = api_pb2.SearchHighlightRequest(query=search_phrase)
        response = await call_grpc_method("SearchMemesBySubstring", request)

        if response:
            await message.answer(response.text or "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    elif command == "/highlight_random":
        response = await call_grpc_method("GetRandomMeme", api_pb2.EmptyHighlightRequest())
        if response:
            await message.answer(response.text or "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    elif command == "/highlight_top5":
        request = api_pb2.TopLongMemesHighlightRequest(limit=5)
        response = await call_grpc_method("GetTopLongMemes", request)
        if response:
            await message.answer(response.text or "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                             "/highlight_month <–º–µ—Å—è—Ü>\n"
                             "/highlight_word <—Ñ—Ä–∞–∑–∞>\n"
                             "/highlight_random\n"
                             "/highlight_top5")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())