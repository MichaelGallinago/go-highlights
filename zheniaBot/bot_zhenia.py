import asyncio
import logging
import os

import grpc
from aiogram import Bot, Dispatcher, types

import api_pb2
import api_pb2_grpc

TOKEN = os.getenv("TELEGRAM_ZHENIA_BOT_TOKEN")
GRPC_SERVER = os.getenv("ZHENIA_BOT_GRPC_SERVER")

bot = Bot(token=TOKEN)
dp = Dispatcher()

stub = None


async def init_grpc_stub():
    global stub
    channel = grpc.aio.insecure_channel(GRPC_SERVER)
    stub = api_pb2_grpc.RequesterServiceStub(channel)


def format_with_title(title: str, content: str) -> str:
    return f"{title}\n\n{content or '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}"


def parse_month(month: str):
    months = {
        "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–º–∞–π": 5, "–∏—é–Ω—å": 6,
        "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
    }
    return months.get(month.lower())


async def handle_highlight_month(message: types.Message, month_name: str):
    month_num = parse_month(month_name)
    if not month_num:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞! –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å, –º–∞—Ä—Ç...")
        return

    try:
        response = await stub.GetMemesByMonth(api_pb2.MonthHighlightRequest(month=month_num))
        title = f"üìÖ *–•–∞–π–ª–∞–π—Ç—ã –∑–∞ –º–µ—Å—è—Ü:* _{month_name.capitalize()}_"
        await message.answer(format_with_title(title, response.text), parse_mode="Markdown")
    except grpc.aio.AioRpcError as e:
        logging.error(f"gRPC error: {e.code()} - {e.details()}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gRPC.")


async def handle_highlight_word(message: types.Message, search_phrase: str):
    try:
        response = await stub.SearchMemesBySubstring(api_pb2.SearchHighlightRequest(query=search_phrase))
        title = f"üîç *–ü–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–µ:* _{search_phrase}_"
        await message.answer(format_with_title(title, response.text), parse_mode="Markdown")
    except grpc.aio.AioRpcError as e:
        logging.error(f"gRPC error: {e.code()} - {e.details()}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gRPC.")


async def handle_highlight_random(message: types.Message):
    try:
        response = await stub.GetRandomMeme(api_pb2.EmptyHighlightRequest())
        title = "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ö–∞–π–ª–∞–π—Ç*"
        await message.answer(format_with_title(title, response.text), parse_mode="Markdown")
    except grpc.aio.AioRpcError as e:
        logging.error(f"gRPC error: {e.code()} - {e.details()}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gRPC.")


async def handle_highlight_top5(message: types.Message):
    try:
        response = await stub.GetTopLongMemes(api_pb2.TopLongMemesHighlightRequest(limit=5))
        title = "üèÜ *–¢–û–ü-5 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ö–∞–π–ª–∞–π—Ç–æ–≤*"
        await message.answer(format_with_title(title, response.text), parse_mode="Markdown")
    except grpc.aio.AioRpcError as e:
        logging.error(f"gRPC error: {e.code()} - {e.details()}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gRPC.")


@dp.message()
async def handle_commands(message: types.Message):
    args = message.text.split(maxsplit=1)
    command = args[0]

    if command == "/highlight_month":
        if len(args) < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü! –ü—Ä–∏–º–µ—Ä: /highlight_month —è–Ω–≤–∞—Ä—å")
            return
        await handle_highlight_month(message, args[1])

    elif command == "/highlight_word":
        if len(args) < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É! –ü—Ä–∏–º–µ—Ä: /highlight_word 1—Å")
            return
        await handle_highlight_word(message, args[1])

    elif command == "/highlight_random":
        await handle_highlight_random(message)

    elif command == "/highlight_top5":
        await handle_highlight_top5(message)

    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                             "/highlight_month <–º–µ—Å—è—Ü>\n"
                             "/highlight_word <—Ñ—Ä–∞–∑–∞>\n"
                             "/highlight_random\n"
                             "/highlight_top5")


async def main():
    logging.basicConfig(level=logging.INFO)
    await init_grpc_stub()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
